#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var WebSocketServer = require('ws').Server;
var debug = require('debug')('dash:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create WebSockets server.
 */
var wss = new WebSocketServer({server: server, path: "/feed"});
wss.on('connection', onWSConnection);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listener for WebSockets server "connecting" event
 */
function onWSConnection(ws) {
    var id = setInterval(function() {
        var memoryUsage = process.memoryUsage(),
            randomValue = 1024 * 1024 * (Math.floor(Math.random() * 12) + 1);

        memoryUsage.rss = memoryUsage.rss + (randomValue * ((Math.random() < .5) ? 1 : -1));
        memoryUsage.heapTotal = memoryUsage.heapTotal + (randomValue * ((Math.random() < .5) ? 1 : -1));
        memoryUsage.heapUsed = memoryUsage.heapUsed + (randomValue * ((Math.random() < .5) ? 1 : -1));

        ws.send(JSON.stringify(memoryUsage), function() { /* ignore errors */ });
    }, 1000);
    debug('started client interval');
    ws.on('close', function() {
        debug('stopping client interval');
        clearInterval(id);
    });
}
